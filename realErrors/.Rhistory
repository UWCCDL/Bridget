select(itemId, condition)
View(conditions)
View(errorData)
errorCond <- left_join(errorData, conditions)
errorCond <- left_join(errorData, conditions, by = "itemId")
View(errorCond)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1))
View(perfCond)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
group_by(userId, Trial) %>%
summarize(
performance = sum(correct) / n()
)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
group_by(userId, repetition) %>%
summarize(
performance = sum(correct) / n()
)
View(perfCond)
View(conditions)
View(compareData)
conditionMerge <- errorCond %>%
select(userId, repetition, condition)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
group_by(userId, repetition) %>%
summarize(
performance = sum(correct) / n()
)
View(conditionMerge)
conditionMerge <- errorCond %>%
select(userId, repetition, condition)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
group_by(userId, repetition) %>%
summarize(
performance = sum(correct) / n()
) %>%
left_join(conditionMerge, by = c("userId", "repetition"))
View(perfCond)
conditionMerge <- errorCond %>%
select(userId, repetition, condition)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
group_by(userId, repetition) %>%
summarize(
performance = sum(correct) / n()
)
View(errorCond)
View(perfCond)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
select(userId, repetition, correct, condition)
View(perfCond)
conditionMerge <- errorCond %>%
select(userId, repetition, condition)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
select(userId, repetition, correct, condition)
group_by(userId, repetition, condition) %>%
summarize(
performance = sum(correct) / n()
)
conditionMerge <- errorCond %>%
select(userId, repetition, condition)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
select(userId, repetition, correct, condition) %>%
group_by(userId, repetition, condition) %>%
summarize(
performance = sum(correct) / n()
)
View(perfCond)
View(plotData)
View(plot2)
View(errorCond)
View(compareData)
corrCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
select(userId, repetition, correct, condition)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
select(userId, repetition, correct, condition)
View(perfCond)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
select(userId, condition, repetition, correct)
View(perfCond)
conditionMerge <- errorCond %>%
select(userId, repetition, condition)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
select(userId, condition, repetition, correct) %>%
group_by(userId, repetition, condition) %>%
summarize(
performance = sum(correct) / n()
)
View(perfCond)
conditionMerge <- errorCond %>%
select(userId, repetition, condition)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
select(userId, condition, repetition, correct) %>%
group_by(userId, condition, repetition) %>%
summarize(
performance = sum(correct) / n()
)
View(perfCond)
View(perfCond)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = condition)) + geom_line(mapping = aes(x = repetition, y = performance, color = condition, group = userId))
conditionMerge <- errorCond %>%
select(userId, repetition, condition)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
select(userId, condition, repetition, correct) %>%
group_by(userId, condition, repetition) %>%
summarize(
performance = sum(correct) / n()
)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = condition)) + geom_line(mapping = aes(x = repetition, y = performance, group = userId))
ggplot(perfCond) +
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userId, size = condition))
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userId, size = condition))
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
mutate(condition = case_when(condition = 0 ~ "No error",
condition = 1 ~ "Error")) %>%
select(userId, condition, repetition, correct) %>%
group_by(userId, condition, repetition) %>%
summarize(
performance = sum(correct) / n()
)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
mutate(condition = case_when(condition == 0 ~ "No error",
condition == 1 ~ "Error")) %>%
select(userId, condition, repetition, correct) %>%
group_by(userId, condition, repetition) %>%
summarize(
performance = sum(correct) / n()
)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userId, size = condition))
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = condition))
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
mutate(condition = case_when(condition == 0 ~ "No error",
condition == 1 ~ "Error")) %>%
select(userId, condition, repetition, correct) %>%
group_by(userId, condition, repetition) %>%
summarize(
performance = sum(correct) / n()
)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = condition)) + geom_line(mapping = aes(x = repetition, y = performance, group = userId))
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = condition)) + geom_line(mapping = aes(x = repetition, y = performance, color = userId, group = userId))
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = condition)) + geom_smooth(mapping = aes(x = repetition, y = performance, group = userId))
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = condition)) + geom_smooth(mapping = aes(x = repetition, y = performance, color = condition, group = userId))
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = condition)) + geom_smooth(mapping = aes(x = repetition, y = performance, fill = condition, group = userId))
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = condition)) + geom_smooth(se=F))
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = condition)) + geom_smooth(se=F)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = condition)) + geom_smooth(mapping = aes(x = repetition, y = performance, fill = condition, group = userId), se=F)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userId, shape = condition))
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userId, shape = condition, position = "jitter"))
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userId, shape = condition), position = "jitter")
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userId, shape = condition), position = "jitter", alpha = 0.6)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userId, shape = condition), position = "jitter", alpha = 0.6) +
geom_smooth(mapping = aes(x = repetition, y = performance, fill = condition, group = c(userId, condition)), se=F)
View(perfCond)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
mutate(condition = case_when(condition == 0 ~ "No error",
condition == 1 ~ "Error")) %>%
select(userId, condition, repetition, correct) %>%
group_by(userId, condition, repetition) %>%
summarize(
performance = sum(correct) / n()
) %>%
unite(userId, condition)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userId, shape = condition), position = "jitter", alpha = 0.6) +
geom_smooth(mapping = aes(x = repetition, y = performance, fill = condition, group = c(userId, condition)), se=F)
View(perfCond)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
mutate(condition = case_when(condition == 0 ~ "No error",
condition == 1 ~ "Error")) %>%
select(userId, condition, repetition, correct) %>%
group_by(userId, condition, repetition) %>%
summarize(
performance = sum(correct) / n()
) %>%
unite("userCond", userId:condition)
View(perfCond)
View(perfCond)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userCond), position = "jitter", alpha = 0.6)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userCond), position = "jitter", alpha = 0.6) +
geom_smooth(mapping = aes(x = repetition, y = performance, fill = condition, group = userCond), se=F)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userCond), position = "jitter", alpha = 0.6) +
geom_smooth(mapping = aes(x = repetition, y = performance, group = userCond), se=F)
perfCond <- errorCond %>%
mutate(correct = case_when(correct == FALSE ~ 0,
correct == TRUE ~ 1)) %>%
mutate(condition = case_when(condition == 0 ~ "No error",
condition == 1 ~ "Error")) %>%
select(userId, condition, repetition, correct) %>%
group_by(userId, condition, repetition) %>%
summarize(
performance = sum(correct) / n()
) %>%
mutate("userCond" = paste(userId, condition, sep="-"))
View(perfCond)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userCond), position = "jitter", alpha = 0.6) +
geom_smooth(mapping = aes(x = repetition, y = performance, color = condition, group = userCond), se=F)
ggplot(perfCond) +
geom_point(mapping = aes(x = repetition, y = performance, color = userCond), position = "jitter", alpha = 0.6) +
geom_smooth(method= "lm", mapping = aes(x = repetition, y = performance, color = condition, group = userCond), se=F)
pdCorrect <- perfCond %>%
filter(condition == "No error")
View(pdCorrect)
pdCorrect <- perfCond %>%
filter(condition == "No error")
pdWrong <- perfCond %>%
filter(conditon == "Error")
View(pdCorrect)
pdWrong <- perfCond %>%
filter(condition == "Error")
pdCorrect <- perfCond %>%
filter(condition == "No error") %>%
pull(performance)
pdWrong <- perfCond %>%
filter(condition == "Error") %>%
pull(performance)
pd2 <- paired(pdCorrect, pdWrong)
pdCorrect <- perfCond %>%
filter(userId == 69410 |
userId == 69415 |
userId == 69425)
pdCorrect <- perfCond %>%
filter(userId == 69410 |
userId == 69415 |
userId == 69425) %>%
filter(condition == "No error") %>%
pull(performance)
pdWrong <- perfCond %>%
filter(condition == "Error") %>%
pull(performance)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(dplyr)
library(broom)
library(reshape2)
install.packages("reshape2")
library(reshape2)
library(glmnet)
install.packages("glmnet")
install.packages("readr")
library(glmnet)
library(glmnet)
library(readr)
## Graphics
library(ggplot2)
library(ggthemes)
install.packages("ggthemes")
library(ggrepel)
install.packages("ggrepel")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(dplyr)
library(broom)
library(reshape2)
library(glmnet)
library(readr)
## Graphics
library(ggplot2)
library(ggthemes)
library(ggrepel)
library(ppcor)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(dplyr)
library(broom)
library(reshape2)
library(glmnet)
library(readr)
## Graphics
library(ggplot2)
library(ggthemes)
library(ggrepel)
library(ppcor)
library(ggExtra)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(dplyr)
library(broom)
library(reshape2)
library(glmnet)
library(readr)
## Graphics
library(ggplot2)
library(ggthemes)
library(ggrepel)
library(ppcor)
# library(ggExtra)
library(ggsci)
library(viridis)
library(scales)
library(patchwork)# Multi-plot alignment
library(ggcorrplot)
library(gapminder) # dataset used to make the box plot connected by lines
library(RColorBrewer)
library(plotly) # Added to make interactive graphs
library(plotly)
library(lubridate) # Added to make interactive graphs; use different date funcs
library(stringr) # Added to make interactive graphs; use different txt funcs
library(extrafont) # Added to make interactive graphs; change font on graphs
library(htmlwidgets) # Added to make interactive graphs; make exports interactive
library(htmlwidgets)
# Load data
load("data/SlimStampen_2022-08-14.RData")
# Filter for just neurostim
groups <- read_csv("groups.csv", show_col_types = FALSE)
data %>%
filter(userId %in% groups$userId) -> data
View(groups)
# Load data
load("data/SlimStampen_2022-08-14.RData")
# Load data
load("data/SlimStampen_2022-08-14 copy.RData")
# Load data
load("data/SlimStampen_2022-08-14copy.RData")
# Load data
load("data/SlimStampen_2022-08-14copy.RData")
setwd("~/Desktop/real_errors")
# Load data
load("data/SlimStampen_2022-08-14copy.RData")
# Load data
load("SlimStampen_2022-08-14copy.RData")
# Filter for just neurostim
groups <- read_csv("groups.csv", show_col_types = FALSE)
# Filter for just neurostim
groups <- read_csv("groups.csv", show_col_types = FALSE)
View(groups)
# Edit Rdata so subject variables are seen as "characters" instead of "numerical" values
groupeddata$group <- as.character(groupeddata$group)
View(data)
# Calculate fact rep, activation, and alpha
MAX_ALPHA=0.5
data <- data %>%
calculate_repetition() %>%
calculate_alpha_and_activation(maxAlpha=MAX_ALPHA)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(dplyr)
library(broom)
library(reshape2)
library(glmnet)
library(readr)
## Graphics
library(ggplot2)
library(ggthemes)
library(ggrepel)
library(ppcor)
# library(ggExtra)
library(ggsci)
library(viridis)
library(scales)
library(patchwork)# Multi-plot alignment
library(ggcorrplot)
library(gapminder) # dataset used to make the box plot connected by lines
library(RColorBrewer)
library(plotly) # Added to make interactive graphs
#devtools::install_github("VanRijnLab/SlimStampeRData",
#   build_vignettes = TRUE,
#  dependencies = TRUE,
# force = TRUE)
# The console will show a prompt asking whether all packages should be updated. Select option 1 (by typing 1 and then pressing enter), this will update all packages.
#vignette("SlimStampeRVignette")
library(SlimStampeRData)
library(plotly) # Added to make interactive graphs
library(plotly)
library(htmltools)
library(lubridate) # Added to make interactive graphs; use different date funcs
library(stringr) # Added to make interactive graphs; use different txt funcs
library(extrafont) # Added to make interactive graphs; change font on graphs
library(htmlwidgets) # Added to make interactive graphs; make exports interactive
library(cowplot)
## Tables
library(kableExtra)
library(xtable)
# Date functions
library(anytime)
library(lubridate)
#install.packages("devtools") # Install SlimStampen packages. Instructions on https://github.com/VanRijnLab/SlimStampeRData
install.packages("devtools")
#install.packages("devtools") # Install SlimStampen packages. Instructions on https://github.com/VanRijnLab/SlimStampeRData
library(devtools)
# SlimStampen
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(plotly) # Added to make interactive graphs
# SlimStampen
#install.packages("devtools") # Install SlimStampen packages. Instructions on https://github.com/VanRijnLab/SlimStampeRData
library(devtools)
devtools::install_github("VanRijnLab/SlimStampeRData",
build_vignettes = TRUE,
dependencies = TRUE,
force = TRUE)
# The console will show a prompt asking whether all packages should be updated. Select option 1 (by typing 1 and then pressing enter), this will update all packages.
vignette("SlimStampeRVignette")
library(SlimStampeRData)
# Load data
load("data/SlimStampen_2022-08-14.RData")
# Filter for just neurostim
groups <- read_csv("groups.csv", show_col_types = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
install.packages("purrr")
install.packages("purrr")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(dplyr)
library(broom)
library(reshape2)
library(glmnet)
library(readr)
## Graphics
library(ggplot2)
library(ggthemes)
library(ggrepel)
library(ppcor)
# library(ggExtra)
library(ggsci)
library(viridis)
library(scales)
library(patchwork)# Multi-plot alignment
library(ggcorrplot)
library(gapminder) # dataset used to make the box plot connected by lines
library(RColorBrewer)
library(plotly) # Added to make interactive graphs
library(lubridate) # Added to make interactive graphs; use different date funcs
library(stringr) # Added to make interactive graphs; use different txt funcs
install.packages("stringr")
install.packages("stringr")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(dplyr)
library(broom)
library(reshape2)
library(glmnet)
library(readr)
## Graphics
library(ggplot2)
library(ggthemes)
library(ggrepel)
library(ppcor)
# library(ggExtra)
library(ggsci)
library(viridis)
library(scales)
library(patchwork)# Multi-plot alignment
library(ggcorrplot)
library(gapminder) # dataset used to make the box plot connected by lines
library(RColorBrewer)
library(plotly) # Added to make interactive graphs
library(lubridate) # Added to make interactive graphs; use different date funcs
library(stringr) # Added to make interactive graphs; use different txt funcs
